package data;

import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;

import timeseries.TimeSeries;
import timeseries.Ts;

/**
 * Static methods for retrieving test data.
 * 
 * @author Jacob Rachiele
 *
 */
public final class TestData {

  private TestData() {
  }

  public static final double[] ausbeer() {
    return new double[] { 284, 213, 227, 308, 262, 228, 236, 320, 272, 233, 237, 313, 261, 227, 250, 314, 286, 227, 260,
        311, 295, 233, 257, 339, 279, 250, 270, 346, 294, 255, 278, 363, 313, 273, 300, 370, 331, 288, 306, 386, 335,
        288, 308, 402, 353, 316, 325, 405, 393, 319, 327, 442, 383, 332, 361, 446, 387, 357, 374, 466, 410, 370, 379,
        487, 419, 378, 393, 506, 458, 387, 427, 565, 465, 445, 450, 556, 500, 452, 435, 554, 510, 433, 453, 548, 486,
        453, 457, 566, 515, 464, 431, 588, 503, 443, 448, 555, 513, 427, 473, 526, 548, 440, 469, 575, 493, 433, 480,
        576, 475, 405, 435, 535, 453, 430, 417, 552, 464, 417, 423, 554, 459, 428, 429, 534, 481, 416, 440, 538, 474,
        440, 447, 598, 467, 439, 446, 567, 485, 441, 429, 599, 464, 424, 436, 574, 443, 410, 420, 532, 433, 421, 410,
        512, 449, 381, 423, 531, 426, 408, 416, 520, 409, 398, 398, 507, 432, 398, 406, 526, 428, 397, 403, 517, 435,
        383, 424, 521, 421, 402, 414, 500, 451, 380, 416, 492, 428, 408, 406, 506, 435, 380, 421, 490, 435, 390, 412,
        454, 416, 403, 408, 482, 438, 386, 405, 491, 427, 383, 394, 473, 420, 390, 410 };
  }

  public static final TimeSeries ausbeerSeries() {
    TimeSeries ausBeer = Ts.newQuarterlySeries(1956, 1,
        new double[] { 284, 213, 227, 308, 262, 228, 236, 320, 272, 233, 237, 313, 261, 227, 250, 314, 286, 227, 260,
            311, 295, 233, 257, 339, 279, 250, 270, 346, 294, 255, 278, 363, 313, 273, 300, 370, 331, 288, 306, 386,
            335, 288, 308, 402, 353, 316, 325, 405, 393, 319, 327, 442, 383, 332, 361, 446, 387, 357, 374, 466, 410,
            370, 379, 487, 419, 378, 393, 506, 458, 387, 427, 565, 465, 445, 450, 556, 500, 452, 435, 554, 510, 433,
            453, 548, 486, 453, 457, 566, 515, 464, 431, 588, 503, 443, 448, 555, 513, 427, 473, 526, 548, 440, 469,
            575, 493, 433, 480, 576, 475, 405, 435, 535, 453, 430, 417, 552, 464, 417, 423, 554, 459, 428, 429, 534,
            481, 416, 440, 538, 474, 440, 447, 598, 467, 439, 446, 567, 485, 441, 429, 599, 464, 424, 436, 574, 443,
            410, 420, 532, 433, 421, 410, 512, 449, 381, 423, 531, 426, 408, 416, 520, 409, 398, 398, 507, 432, 398,
            406, 526, 428, 397, 403, 517, 435, 383, 424, 521, 421, 402, 414, 500, 451, 380, 416, 492, 428, 408, 406,
            506, 435, 380, 421, 490, 435, 390, 412, 454, 416, 403, 408, 482, 438, 386, 405, 491, 427, 383, 394, 473,
            420, 390, 410 });
    ausBeer.setName("Quarterly Beer Production");
    return ausBeer;
  }

  public static final TimeSeries livestock() {
    TimeSeries livestock = Ts.newAnnualSeries(1961,
        new double[] { 232.288994, 229.536258, 233.145936, 243.763684, 252.602916, 259.677371, 260.766892, 269.784084,
            266.414974, 263.917747, 268.307222, 260.662556, 266.639419, 277.515778, 283.834045, 290.309028, 292.474198,
            300.830694, 309.286657, 318.331081, 329.37239, 338.883998, 339.244126, 328.600632, 314.255385, 314.459695,
            321.413779, 329.789292, 346.385165, 352.297882, 348.370515, 417.562922, 417.12357, 417.749459, 412.233904,
            411.946817, 394.697075, 401.49927, 408.270468, 414.2428, 407.997978, 403.460832, 413.824928, 428.104959,
            445.338742, 452.994173, 455.74017 });
    livestock.setName("Livestock");
    return livestock;
  }

  public static final TimeSeries elecSales() {
    TimeSeries elec = Ts.newAnnualSeries(1989,
        new double[] { 2354.34, 2379.71, 2318.52, 2468.99, 2386.09, 2569.47, 2575.72, 2762.72, 2844.5, 3000.7, 3108.1,
            3357.5, 3075.7, 3180.6, 3221.6, 3176.2, 3430.6, 3527.48, 3637.89, 3655 });
    elec.setName("Annual Electricity Sales");
    return elec;
  }

  public static final TimeSeries sydneyAir() {
    double[] syd = new double[] { 1.912, 1.848, 1.856, 2.142, 2.118, 2.048, 2.111, 2.199, 2.231, 2.081, 2.213, 2.131,
        2.147226, 2.131, 2.034, 2.19, 2.262, 2.579, 2.367, 2.432, 2.64, 2.614, 2.569, 2.523, 2.26, 1.117, 0.59, 0.966,
        1.235, 2.001, 1.696, 2.089, 2.716, 2.483, 2.461, 2.533, 2.273, 2.273, 2.37, 1.782, 1.385, 2.322, 2.34, 2.203,
        2.3, 2.125, 2.345, 2.224, 1.952, 2.212, 2.028, 1.906, 1.834, 1.797, 1.869, 1.886, 2.131, 2.021, 2.199, 2.14,
        2.19, 1.917, 2.096, 2.254, 2.251, 2.072, 0.993, 1.675, 1.463, 2.256, 2.216, 2.218, 2.568, 2.483, 2.545, 2.599,
        2.483, 1.793, 0.516, 0.873, 1.195, 1.525, 1.906, 2.246, 2.247, 2.316, 2.276, 2.403, 2.432, 2.49, 2.013, 1.508,
        2.251, 2.079, 2.21, 1.96, 2.251, 2.013, 2.252, 2.067, 1.831, 2.069, 1.953, 2.199, 1.771, 1.696, 1.788, 1.636,
        1.741, 1.597, 1.943, 1.66, 0.616, 0, 0, 0, 0, 0, 0, 0, 0.053, 0.04, 0.354, 0.505, 0.711, 0.723, 0.796, 0.856,
        0.845, 0.807, 0.276, 0.339, 0.581, 0.894, 0.936, 1.111, 1.446, 1.517, 1.513, 1.508, 1.636, 1.38, 1.453, 1.459,
        1.538, 1.327, 1.027, 1.365, 1.475, 1.365, 1.351, 1.231, 1.447, 1.408, 1.089, 1.357, 1.287, 1.087, 1.017, 1.09,
        1.343, 1.164, 1.169, 1.465, 1.242, 1.22, 1.231, 1.266, 1.337, 1.079, 1.223, 1.351, 1.269, 1.382, 1.435, 1.371,
        1.341, 1.399, 1.44, 1.236, 1.441, 0.988, 0.3, 0.401, 0.529, 0.786, 1.086, 0.725, 1.127, 1.146, 1.086, 1.134,
        1.02, 1.022, 1.224, 0.895, 0.658, 0.977, 0.916, 0.83, 0.99, 0.77, 0.801, 0.839, 0.835, 0.802, 0.763, 0.77,
        0.838, 0.742, 0.793, 0.9, 0.96, 0.8, 0.807, 0.841, 0.88, 0.818, 0.817, 0.819, 0.998, 1.22, 0.966, 0.895, 0.978,
        0.913, 0.947, 1.002, 1.081, 0.977, 1.027, 0.895, 0.9, 0.762, 0.329, 0.351, 0.419, 0.618, 0.845, 0.727, 1.2,
        1.801, 1.727, 1.992, 1.865, 1.801, 1.661, 2.366, 2.003, 2.092, 1.703, 1.337, 1.985, 1.808, 1.839, 1.714, 1.73,
        1.725, 1.456, 1.447, 1.357, 1.28, 1.363, 1.228, 1.411, 1.13, 1.153, 1.257, 1.259, 1.153, 1.202, 1.185, 1.247,
        1.434, 1.45, 1.227, 1.245, 1.417, 1.458, 1.398, 1.423, 1.358, 1.488 };
    return new TimeSeries(ChronoUnit.WEEKS, OffsetDateTime.of(LocalDateTime.of(1987, 6, 22, 0, 0), ZoneOffset.ofHours(0)), 1L, syd);
  }

}
